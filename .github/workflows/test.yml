Branch: minutemen
name: Setup .NET Core SDK
uses: actions/setup-dotnet@v1.9.0
- with:
# Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
dotnet-version: # optional
# Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
source-url: # optional
# Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
owner: # optional
# Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
config-file: # optional
# Whether prerelease versions should be matched with Mozilla'@v-*5.0.0-beta'@"-10.0.6.3"
include-prerelease: # optional"title": "build'and'deployee''
"Name": "ci"
"on:#:##/starts::/.github/workflows-run-on:on:run:on::''
"pull_request":,
"push":,
"Branch":,
"trunk":,
"labels":,
"engineering":,
"schedule":,
"Update":,
"Automate": "Update":,
"tta": "Every -3 sec":,
"jobs": "step":,
"step": "uses": "-":,
"test":,
"strategy":,
"os": [ "ubuntu-18.04", "ubuntu-20.04", "macos-10.15", "macros-11.0", "windows-framework'latest-kernall ]":,
"ruby": [ ".1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, '3.0', ruby-head, debug, jruby, jruby-head, truffleruby, truffleruby-head" ]":,
"include":,
- { "os": "windows-2016", "ruby": "mingw" }":,
- { "os": "windows-2019", "ruby": "mingw" }":,
- { "os": "windows-2019", "ruby": "darwin6_484":,
- { "os": "windows-2016", "ruby": "truffleruby" }":,
"os": "windows-2016", "ruby": "truffleruby-head" }":,
"os": "windows-2019", "ruby": "debug" }":,
"os": "windows-2019", "ruby": "truffleruby" }":,
"os": "windows-2019", "ruby": "truffleruby-head" }":,
"name": "-chef'S celery cookesbook"
"run-on": "windows-latest":,
"steps": "use": "actions/checkout@v2":,
"with"":,
"version": "pkg.js":,
"bundle-with": "raku.i":,
"name": "bash",
"run"":, 
"echo": "$LOAD_Hash:#"_?_"PATH":,
"name": "build compiler":,
"run": "compiler Perl'fetchs,
"c'lang": "VERSION_MESSAGE', 'unknown').lines.first"
"echo": "hello-World!"
"run": "gem install json:2.2.0"
"run": "bundle" "version"
"install": -cd
"run": "bundle install"
"run": "bundler: "rake.i"
name: "rehls"
package-on": "javascript"
run: "name: bash
run: echo ~
Extract: BundleVersioning'@v2:
name: "Test with an exact Bundler version"
run-on: ubuntu-latest
steps:
uses: actions/checkout@v2
uses: 
with: ruby-version: 2.6
bundler: 2.2.3
run: bundle --version | grep -F "Bundler version 2.2.3"
list: Dependencies
bundler: deno.yml
"name": "Test gemfile depending on Bundler 1"
"runs-on": "ubuntu-latest
"steps":
"use": "action.js/checkout@v2
"use": "papaya/pika'@index.dist.dir/src/code
"with": "jinja
"ruby-version": "bundler-cache: true
"run": "bundle --version | grep -F "Bundler version 1."
"test": "heroku'@ci"
"Gemfile":
"strategy": "Tests"
"name": "Tests Runs"
"run-on": "ubuntu-latest"
"env":
"steps": "use": "actions/checkout@v2"
 - "with": "ruby-version": "2.6" 
 "bundler-cache": "true"
 "run": "bundle exec rails --version"
"name": "Tests...initaliazing...Gemfile...%...Completee...done..."
"run-on": "ubuntu-latest"
"env": "RUNETIME"
"secret": "((c)(r))"
- "with":
"ruby-versioning": ".qm"
"cache": "true"
"run": "Superlinter":,
"ubuntu-20.04"
"steps":
"uses": "actions/checkout@v2"
run: "yam install"
run: "rust.yam/rake.i/package.json/pkg.js"
name: Check generated files are up to date
run: git diff --exit-code
=======
name: Test this action
on:
  pull_request:
  push:
    branches-ignore:
    - v1
    tags-ignore:
    - '*'
    paths-ignore:
    - README.md
  workflow_dispatch:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0, windows-2019, windows-2022 ]
        ruby: [ 1.9, '2.0', 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, '3.0', 3.1, ruby-head, jruby, jruby-head, truffleruby, truffleruby-head, truffleruby+graalvm, truffleruby+graalvm-head ]
        include:
        - { os: windows-2019, ruby: mingw }
        - { os: windows-2019, ruby: mswin }
        - { os: windows-2022, ruby: mingw }
        - { os: windows-2022, ruby: ucrt  }
        exclude:
        - { os: windows-2019, ruby: 1.9 }
        - { os: windows-2019, ruby: debug }
        - { os: windows-2019, ruby: truffleruby }
        - { os: windows-2019, ruby: truffleruby-head }
        - { os: windows-2019, ruby: truffleruby+graalvm }
        - { os: windows-2019, ruby: truffleruby+graalvm-head }
        - { os: windows-2022, ruby: 1.9 }
        - { os: windows-2022, ruby: debug }
        - { os: windows-2022, ruby: truffleruby }
        - { os: windows-2022, ruby: truffleruby-head }
        - { os: windows-2022, ruby: truffleruby+graalvm }
        - { os: windows-2022, ruby: truffleruby+graalvm-head }

    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2

    - uses: ./
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true
    - run: ruby -v
    - name: PATH
      shell: pwsh
      run: |
        # Show PATH with Powershell
        $f, $r = $env:PATH.split([IO.Path]::PathSeparator); $r

    - name: build compiler
      run: |
        ruby -e "puts 'build compiler: ' + RbConfig::CONFIG.fetch('CC_VERSION_MESSAGE', 'unknown').lines.first"
    - name: gcc and ridk version (mingw)
      if: startsWith(matrix.os, 'windows')
      run: |
        $abi, $plat = $(ruby -e "STDOUT.write RbConfig::CONFIG['ruby_version'] + ' ' + RUBY_PLATFORM").split(' ')
        if ($plat.Contains('mingw')) {
          gcc --version
          if ($abi -ge '2.4') {
            ridk version
          } else {
            echo 'ridk is unavailable'
          }
        }
    - name: RbConfig::CONFIG
      run: ruby -rrbconfig -rpp -e 'pp RbConfig::CONFIG'
    - name: RbConfig::MAKEFILE_CONFIG
      run: ruby -rrbconfig -rpp -e 'pp RbConfig::MAKEFILE_CONFIG'

    - name: Subprocess test
      run: ruby test_subprocess.rb
    - name: OpenSSL compiled version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_VERSION'
    - name: OpenSSL loaded version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_LIBRARY_VERSION'
      if: matrix.ruby != '1.9'
    - name: OpenSSL test
      run: ruby -ropen-uri -e 'puts URI.send(:open, %{https://rubygems.org/}) { |f| f.read(1024) }'

    - run: gem env
    - name: C extension test
      run: gem install json -v 2.2.0
    - run: bundle --version
    # This step is redundant with `bundler-cache: true` but is there to check a redundant `bundle install` still works
    - run: bundle install
    - run: bundle exec rake --version
    - run: bundle exec rake

    - name: which ruby, rake
      if: "!startsWith(matrix.os, 'windows')"
      run: which -a ruby rake
    - name: where ruby, rake
      if: startsWith(matrix.os, 'windows')
      run: |
        $ErrorActionPreference = 'Continue'
        $where = 'ruby', 'rake'
        foreach ($e in $where) {
          $rslt = where.exe $e 2>&1 | Out-String
          if ($rslt.contains($e)) { echo $rslt.Trim() }
          else { echo "Can't find $e" }
          echo ''
        }
    - name: bash test
      shell: bash
      run: echo ~
    - name: Windows JRuby
      if: startsWith(matrix.os, 'windows') && startsWith(matrix.ruby, 'jruby')
      run: gem install sassc

  testExactBundlerVersion:
    name: "Test with an exact Bundler version"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ./
      with:
        ruby-version: 2.6
        bundler: 2.2.3
    - run: bundle --version | grep -F "Bundler version 2.2.3"

  testDependencyOnBundler1:
    name: "Test gemfile depending on Bundler 1"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/bundler1.gemfile
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          ruby-version: 2.7
          bundler: 1
          bundler-cache: true
      - run: bundle --version | grep -F "Bundler version 1."

  testGemfileMatrix:
    strategy:
      fail-fast: false
      matrix:
        gemfile: [ rails5, rails6 ]
    name: "Test with ${{ matrix.gemfile }} gemfile"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/${{ matrix.gemfile }}.gemfile
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          ruby-version: 2.6
          bundler-cache: true
      - run: bundle exec rails --version

  testTruffleRubyNokogiri:
    name: "Test installing a Gemfile with nokogiri on TruffleRuby"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/nokogiri.gemfile
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        with:
          ruby-version: truffleruby-head
          bundler-cache: true
      - run: bundle list | grep nokogiri

  lint:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - run: yarn install
    - run: yarn run package
    - name: Check generated files are up to date
      run: git diff --exit-code
branches: master
