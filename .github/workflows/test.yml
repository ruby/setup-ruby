name: Test this action
on:
  pull_request:
  push:
    branches-ignore:
    - v1
    tags-ignore:
    - '*'
    paths-ignore:
    - README.md
  workflow_dispatch:
permissions:
  contents: read

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, ubuntu-22.04, macos-11, macos-12, windows-2019, windows-2022 ]
        ruby: [
          '1.9', '2.0', '2.1', '2.2', '2.3', '2.4', '2.5', '2.6', '2.7', '3.0', '3.1', '3.2', ruby-head,
          jruby, jruby-head,
          truffleruby, truffleruby-head,
          truffleruby+graalvm, truffleruby+graalvm-head
        ]
        include:
        - { os: windows-2019, ruby: mingw }
        - { os: windows-2019, ruby: mswin }
        - { os: windows-2022, ruby: mingw }
        - { os: windows-2022, ruby: mswin }
        - { os: windows-2022, ruby: ucrt  }
        exclude:
        - { os: windows-2019, ruby: '1.9' }
        - { os: windows-2019, ruby: debug }
        - { os: windows-2019, ruby: truffleruby }
        - { os: windows-2019, ruby: truffleruby-head }
        - { os: windows-2019, ruby: truffleruby+graalvm }
        - { os: windows-2019, ruby: truffleruby+graalvm-head }
        - { os: windows-2022, ruby: '1.9' }
        - { os: windows-2022, ruby: debug }
        - { os: windows-2022, ruby: truffleruby }
        - { os: windows-2022, ruby: truffleruby-head }
        - { os: windows-2022, ruby: truffleruby+graalvm }
        - { os: windows-2022, ruby: truffleruby+graalvm-head }

    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - uses: ./
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true
    - run: ruby -v
    - name: PATH
      shell: pwsh
      run: |
        # Show PATH with Powershell
        $f, $r = $env:PATH.split([IO.Path]::PathSeparator); $r

    - name: build compiler
      run: |
        ruby -e "puts 'build compiler: ' + RbConfig::CONFIG.fetch('CC_VERSION_MESSAGE', 'unknown').lines.first"
    - name: gcc and ridk version (mingw)
      if: startsWith(matrix.os, 'windows')
      run: |
        $abi, $plat = $(ruby -e "STDOUT.write RbConfig::CONFIG['ruby_version'] + ' ' + RUBY_PLATFORM").split(' ')
        if ($plat.Contains('mingw')) {
          gcc --version
          if ($abi -ge '2.4') {
            ridk version
          } else {
            echo 'ridk is unavailable'
          }
        } elseif ($plat.Contains('mswin')) {
          &"$env:VCPKG_INSTALLATION_ROOT\vcpkg" list
        }
    - name: RbConfig::CONFIG
      run: ruby -rrbconfig -rpp -e 'pp RbConfig::CONFIG'
    - name: RbConfig::MAKEFILE_CONFIG
      run: ruby -rrbconfig -rpp -e 'pp RbConfig::MAKEFILE_CONFIG'

    - name: Subprocess test
      run: ruby test_subprocess.rb
    - name: OpenSSL compiled version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_VERSION'
    - name: OpenSSL loaded version
      run: ruby -ropenssl -e 'puts OpenSSL::OPENSSL_LIBRARY_VERSION'
      if: matrix.ruby != '1.9'
    - name: OpenSSL test
      run: ruby -ropen-uri -e 'puts URI.send(:open, %{https://rubygems.org/}) { |f| f.read(1024) }'

    - run: gem env
    - name: C extension test
      run: gem install json -v 2.2.0
    - run: bundle --version
    # This step is redundant with `bundler-cache: true` but is there to check a redundant `bundle install` still works
    - run: bundle install
    - run: bundle exec rake --version
    - run: bundle exec rake

    # Ensure the same bundle commands work in bash on Windows
    - name: bundle install (bash)
      run: bundle install
      shell: bash
      if: startsWith(matrix.os, 'windows')
    - name: bundle exec rake --version (bash)
      run: bundle exec rake --version
      shell: bash
      if: startsWith(matrix.os, 'windows')
    - name: bundle exec rake (bash)
      run: bundle exec rake
      shell: bash
      if: startsWith(matrix.os, 'windows')

    - name: Test `gem github:` in a Gemfile
      run: bundle install
      env:
        BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/gem_from_github.gemfile

    - name: which ruby, bundle
      shell: bash
      run: which -a ruby bundle
    - name: which rake
      run: which -a rake
      if: "!startsWith(matrix.os, 'windows')"
    - name: where ruby, rake, bundle
      if: startsWith(matrix.os, 'windows')
      run: |
        $ErrorActionPreference = 'Continue'
        $where = 'ruby', 'rake', 'bundle'
        foreach ($e in $where) {
          $rslt = where.exe $e 2>&1 | Out-String
          if ($rslt.contains($e)) { echo $rslt.Trim() }
          else { echo "Can't find $e" }
          echo ''
        }
    - name: bash test
      shell: bash
      run: echo ~ && bundle install
    - name: Windows JRuby
      if: startsWith(matrix.os, 'windows') && startsWith(matrix.ruby, 'jruby')
      run: gem install sassc

  testNoGemfile:
    name: "Test with no Gemfile"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: rm Gemfile
      - uses: ./
        with:
          ruby-version: '2.6'
      - run: ruby -v

  testLatestRubygemsVersion:
    name: "Test rubygems: latest upgrades the default RubyGems version"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        ruby-version: '2.6'
        rubygems: latest
    - run: ruby -e "exit(Gem.rubygems_version > Gem::Version.new('3.0.3'))"

  testFixedRubygemsVersionUpgrades:
    name: "Test rubygems: version upgrades RubyGems to that version if the default is older"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        ruby-version: '2.6'
        rubygems: 3.2.3
    - run: gem --version | grep -F "3.2.3"

  testFixedRubygemsVersionNoop:
    name: "Test rubygems: version noops if the default is newer"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        ruby-version: '3.1.0'
        rubygems: 3.2.3
    - run: gem --version | grep -F "3.3.3"

  testUseBundlerFromRubyGemsUpdate:
    name: "Test rubygems: version uses the Bundler installed by the rubygems update"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: '3.1.0'
          rubygems: 3.4.0
      - run: gem --version | grep -F "3.4.0"
      - run: bundle --version | grep -F "2.4.0"

  testFixedBundlerVersionForOldRuby:
    name: "Test bundler: 1.x for old Ruby"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: '2.2'
          bundler: 1.16.6
      - run: bundle --version | grep -F "1.16.6" # And not 1.17.x from ~> 1

  testMajorBundlerVersion:
    name: "Test with a major Bundler version"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        ruby-version: '2.6'
        bundler: 2
    - run: bundle --version | grep -P "Bundler version 2\.\d+\.\d+"

  testMinorBundlerVersion:
    name: "Test with a minor Bundler version"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        ruby-version: '2.6'
        bundler: 2.2
    - run: bundle --version | grep -P "Bundler version 2\.2\.\d+"

  testExactBundlerVersion:
    name: "Test with an exact Bundler version"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        ruby-version: '2.6'
        bundler: 2.2.3
    - run: bundle --version | grep -F "Bundler version 2.2.3"

  testBundlerPre:
    name: "Test with a Bundler pre/rc version"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: '2.6'
          bundler: 2.2.0.rc.2
      - run: bundle --version | grep -F "Bundler version 2.2.0.rc.2"

  testBundlerDev:
    name: "Test BUNDLED WITH Bundler dev"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/bundler-dev.gemfile
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: ruby-head
          bundler-cache: true

  testDependencyOnBundler1:
    name: "Test gemfile depending on Bundler 1"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/bundler1.gemfile
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: '2.7'
          bundler: 1
          bundler-cache: true
      - run: bundle --version | grep -F "Bundler version 1."

  testGemfileMatrix:
    strategy:
      fail-fast: false
      matrix:
        gemfile: [ rails5, rails6 ]
    name: "Test with ${{ matrix.gemfile }} gemfile"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/${{ matrix.gemfile }}.gemfile
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: '2.6'
          bundler-cache: true
      - run: bundle exec rails --version

  testTruffleRubyNokogiri:
    name: "Test installing a Gemfile with nokogiri on TruffleRuby"
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/gemfiles/nokogiri.gemfile
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          ruby-version: truffleruby-head
          bundler-cache: true
      - run: bundle list | grep nokogiri

  lint:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - run: yarn install
    - run: yarn run package
    - name: Check generated files are up to date
      run: git diff --exit-code
